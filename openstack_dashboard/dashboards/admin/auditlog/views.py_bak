# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2012 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#
# Copyright 2012 OpenStack Foundation
# Copyright 2012 Nebula, Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

from django.core.urlresolvers import reverse
from django.core.urlresolvers import reverse_lazy
from django.utils.datastructures import SortedDict
from django.utils.translation import ugettext_lazy as _

from horizon import exceptions
from horizon import forms
from horizon import tables
from horizon import tabs
from horizon.utils import memoized

from openstack_dashboard import api
from openstack_dashboard.dashboards.admin.auditlog \
    import tables as admin_tables
from openstack_dashboard.dashboards.admin.auditlog \
    import tabs as admin_tabs
from openstack_dashboard.dashboards.admin.auditlog \
    import forms as admin_forms

class AdminIndexView(tables.DataTableView):
    table_class = admin_tables.AdminAuditlogTable
    template_name = 'admin/auditlog/index.html'

#    def has_more_data(self, table):
#        return self._more

    def get_data(self):
        auditlogs = []
        marker = self.request.GET.get(
            admin_tables.AdminAuditlogTable._meta.pagination_param, None)
#        try:
#            auditlogs, self._more = api.auditlog.auditlog_list(
#                self.request,
#                search_opts={'marker': marker,
#                             'paginate': True},
#                all_tenants=True)
#        except Exception:
#            self._more = False
#            exceptions.handle(self.request,
#                              _('Unable to retrieve auditlogs list.'))
        if auditlogs:
            try:
                tenants, has_more = api.keystone.tenant_list(self.request)
            except Exception:
                tenants = []
                msg = _('Unable to retrieve auditlogs information.')
                exceptions.handle(self.request, msg)

            try:
                users, has_more = api.keystone.user_list(self.request)
            except Exception:
                users = []
                msg = _('Unable to retrieve auditlogs user information.')
                exceptions.handle(self.request, msg)

	    tenant_dict = SortedDict([(t.id, t) for t in tenants])
            user_dict = SortedDict([(t.id, t) for t in users])
            for auditlog in auditlogs:
                tenant = tenant_dict.get(auditlog.tenant_id, None)
                user = user_dict.get(auditlog.user_id, None)
                auditlog.tenant_name = getattr(tenant, "name", None)
                auditlog.user_name = getattr(user, "name", None)
        return auditlogs


class DetailView(tabs.TabView):
    tab_group_class = admin_tabs.AuditlogDetailTabs
    template_name = 'admin/auditlog/detail.html'
    redirect_url = 'horizon:admin:auditlog:index'

    def get_context_data(self, **kwargs):
        context = super(DetailView, self).get_context_data(**kwargs)
        context["auditlog"] = self.get_data()
        return context

    @memoized.memoized_method
    def get_data(self):
        try:
            auditlog_id = self.kwargs['auditlog_id']
            auditlog = api.auditlog.auditlog_get(self.request, auditlog_id)
        except Exception:
            redirect = reverse(self.redirect_url)
            exceptions.handle(self.request,
                              _('Unable to retrieve details for '
                                'auditlog "%s".') % auditlog_id,
                                redirect=redirect)
            raise exceptions.Http302(redirect)
        return auditlog

    def get_tabs(self, request, *args, **kwargs):
        auditlog = self.get_data()
        return self.tab_group_class(request, auditlog=auditlog, **kwargs)


class SearchView(forms.ModalFormView):
    template_name = 'admin/auditlog/index.html'
    form_class = admin_forms.SearchForm

    def get_context_data(self, **kwargs):
        context = super(SearchView, self).get_context_data(**kwargs)
        return context
